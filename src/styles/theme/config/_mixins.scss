// Mixin để kiểm tra rằng map bắt đầu từ giá trị 0
@mixin _assert-starts-at-zero($map, $map-name) {
  $first-key: nth(map-keys($map), 1);
  $first-value: map-get($map, $first-key);

  @if $first-value != 0 {
    @error "#{$map-name} must start at 0, but #{$first-key} starts at #{inspect($first-value)}.";
  }
}

// Mixin để kiểm tra các giá trị trong map có tăng dần hay không
@mixin _assert-ascending($map, $map-name) {
  $previous-value: null;
  @each $key, $value in $map {
    @if $previous-value != null and $value < $previous-value {
      @error "#{$map-name} must be in ascending order, but #{$key} (#{inspect($value)}) is not greater than #{inspect($previous-value)}.";
    }
    $previous-value: $value;
  }
}

// mantine

@mixin light {
  [data-mantine-color-scheme="light"] & {
    @content;
  }
}

@mixin dark {
  [data-mantine-color-scheme="dark"] & {
    @content;
  }
}

@mixin hover {
  @media (hover: hover) {
    &:hover {
      @content;
    }
  }

  @media (hover: none) {
    &:active {
      @content;
    }
  }
}

@mixin smaller-than($breakpoint) {
  @media (max-width: $breakpoint) {
    @content;
  }
}

@mixin larger-than($breakpoint) {
  @media (min-width: $breakpoint) {
    @content;
  }
}

// Add direction mixins if you need rtl support
@mixin rtl {
  [dir="rtl"] & {
    @content;
  }
}

@mixin ltr {
  [dir="ltr"] & {
    @content;
  }
}

@mixin space-y($spacing) {
  .space-y-#{$spacing} {
    & > * {
      margin-bottom: #{$spacing * 1px};
      // border: solid 1px red;
    }
    & > *:last-child {
      margin-bottom: 0;
    }
  }
}

@for $i from 1 through 20 {
  @include space-y($i);
}

@mixin generate-grid-classes($columns) {
  @for $i from 1 through $columns {
    &.span-#{$i} {
      grid-column: span $i;
      // border: solid 1px orange;
    }
  }
}

@mixin generate-grid-gap-classes($columns) {
  @for $i from 1 through $columns {
    &.gap-#{$i} {
      fieldset {
        gap: #{$i}px;
      }
    }
  }
}
